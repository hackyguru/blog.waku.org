"use strict";(self.webpackChunkblog_waku_org=self.webpackChunkblog_waku_org||[]).push([[822],{10711:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"scaling-waku-progress-update","metadata":{"permalink":"/scaling-waku-progress-update","source":"@site/posts/2023-09-21-scaling-waku-a-progress-update.mdx","title":"Scaling Waku: A Progress Update","description":"A glance into how Waku has progressed it\'s scaling capabilities throughout 2023","date":"2023-09-21T00:00:00.000Z","formattedDate":"September 21, 2023","tags":[],"readingTime":7.61,"hasTruncateMarker":true,"authors":[{"name":"mf","twitter":"@0x_m_f","github":"DeBelg","key":"mf"}],"frontMatter":{"layout":"post","name":"Scaling Waku: A Progress Update","title":"Scaling Waku: A Progress Update","date":"2023-09-21T00:00:00.000Z","authors":"mf","published":true,"slug":"scaling-waku-progress-update","categories":"scaling, waku, progress, milestones","image":"/img/black-waku-logo-with-name.png","hide_table_of_contents":false},"nextItem":{"title":"Device Pairing in Js-waku and Go-waku","permalink":"/device-pairing-in-js-waku-and-go-waku"}},"content":"A glance into how Waku has progressed it\'s scaling capabilities throughout 2023\\n\\n\x3c!--truncate--\x3e\\n\\nAs we move forward into the last months 2023, our primary goal has been to solidify the scalability of Waku protocols, focusing on Status Communities.\\n\\n\\n\\n\\nWe have [set and reached](https://github.com/waku-org/pm/issues/12) our milestone of providing a Waku network that can scale to approximately 10K _active_ users in Status Communities. While continuing to provide [Status](https://status.im) the required network services to make such a community viable, we believe that the research, protocols, tools, and solutions we are working on will allow the overall Waku network to scale to over a million nodes.\\n\\n\\nTo meet Status\'s timeline for the Communities feature, the Waku team made some tough decisions that required tradeoffs in terms of decentralization and other design goals. However, this approach has allowed us to demonstrate the core stability and scalability of Waku\'s protocols, while continuously working towards long-term solutions that provide better anonymity, robustness, and decentralization features.\\n\\n\\nThis article will continue diving deeper into what we did and where you can learn more about these topics. If you\'re already keen to get your hands dirty, we have recently published our upgraded [Waku documentation](https://docs.waku.org), allowing us to build faster, [together](https://docs.waku.org/community/).\\n\\n\\n## Overview\\n\\n- [ **Theoretical: Laying the groundwork**](#laying-the-theoretical-groundwork)\\n    - Theoretical Analysis of Scaling Gossipsub.\\n    - Static Sharding\\n\\n- [**Bridging theory to practice**](#bridging-theory-to-practice)\\n    - Simulations\\n    - Status Telemetry Analysis\\n\\n- [**Hands-on achievements**](#hands-on-achievements)\\n    - Status MVP Delivery (Scaled Waku Communities to 10k)\\n    - Protocol Service Improvements\\n        - PostgreSQL transition\\n        - Waku Peer Exchange\\n        - Filter Protocol Redesign\\n    - Status DoS mitigation mechanism\\n    - Building for builders\\n        - Waku Docs upgrade\\n        - C API\\n-   [**Contribute to the decentralisation of communication**](#contribute-to-the-decentralisation-of-communication)\\n\\n---\\n\\n\\n## Laying the theoretical groundwork\\n\\n\\n\\n### Theoretical Analysis of Scaling gossipsub\\nWe started in Q1 by doing a [theoretical analysis (mathematical modelling)](https://hackmd.io/IYmyyUIdSEuRZ7WbYd6dng?view) of GossipSub scaling under certain conditions.\\n\\nThe numbers for our message rates and sizes chosen for the model come from the telemetric analysis of typical traffic on significantly sizable Discord servers and existing Status Communities. From this, we conclude that the Waku Relay network can scale to 10,000 nodes per shard.\\n\\nSuppose we further assume that each Status Community operates on a separate shard. In that case, each community can scale to 10,000 _active_ relay-only users while bandwidth usage remains within a reasonable range for each user.\\n\\nRealistically most community nodes are not active simultaneously, so this approach could scale to ~100,000 nodes per community if roughly 1/10th of users are active at any time.\\n\\n### Static sharding\\n\\nBased on the analyses above, we published [an RFC](https://rfc.vac.dev/spec/57/), bringing together an integrated strategy to scale Status Communities based on static sharding. This requires manually selecting and configuring static shard(s) per community, with no sharing of shards between communities. Static sharding provides a simple way to achieve scalability with reasonable Denial of Service (DoS) protection (more on that below) but also requires some trade-offs in decentralisation and anonymity. Therefore, our longer-term strategy is to provide a way to auto-scale the Waku network with \\"autosharding\\" - this allows multiple applications and communities to share the same set of shards without intervening manually in the underlying message routing strategies.\\n\\n[This Github issue](https://github.com/waku-org/research/issues/3) provides more information on our network strategy as we advance. In the near future you can expect an elaborated post on our strategy & roadmap.\\n\\n---\\n## Bridging theory to practice\\n---\\n\\n### Simulations\\nTo test our theoretical conclusions, the Distributed Systems Testing (DST) team ran extensive simulations using a Waku simulation tool built on the Kurtosis framework, [Wakurtosis](https://github.com/vacp2p/wakurtosis).\\n\\nThe DST team has recently published a [summary report](https://docs.google.com/document/d/1U3bzlbk_Z3ZxN9tPAnORfYdPRWyskMuShXbdxCj4xOM/edit) detailing these conclusions about scalability, matching our theoretical expectations while showing that the nwaku client can deal with the resource overhead in a growing network.\\n\\nWhile achieving full-scale simulations of 10,000 nodes posed challenges, initial simulations of up to 1000 nodes aligned with our mathematical models. This gave us confidence in the viability of our approach.\\n\\n\\n### Status telemetry analysis\\n\\nHaving drawn theoretical conclusions under which a Waku Relay network would scale, we then experimented to verify our conclusions. Afterwards we performed a [telemetric analysis](https://github.com/vacp2p/vac-book/blob/main/scratch/status-scaling/status-telemetry-analysis.md) of current Status Community traffic.\\n\\nThis allowed us to discover potential bottlenecks when sending large messages over Waku, determine major bandwith usage, and propose strategies to help Status Communities reasonably use Waku without compromising its scalability.\\n\\n\\n\\n\\n---\\n##  Hands-on achievements\\n---\\n\\n### Protocol service improvements\\n\\nTo cater to the needs of a growing network of users on diverse platforms, the team improved (and in some cases wholly redesigned) our existing protocols based on the lessons we have learned from dogfooding the Waku network. Of these, the changes to the store and filter protocols were the most significant.\\n\\n#### - PostgreSQL transition\\n To be able to retrieve an increasing amount of large history queries & messages from our store protocol, we have [transitioned](https://github.com/waku-org/pm/issues/4 ) from a simple SQLite backend to a more robust PostgreSQL archive. This allows store nodes to serve multiple queries in parallel while improving message reliability through redundancy.\\n\\n#### - Filter protocol redesign\\nThe filter protocol allows resource-restricted devices to receive only a subset of messages routed in the network. We have redesigned [the entire filter protocol](https://rfc.vac.dev/spec/12/) to be more robust and provide features requested by Waku-based applications, such as refreshing existing subscriptions.\\n\\nThis new filter protocol version is currently being dogfooded within both mobile and desktop production environment, and the initial feedback is prominently positive.\\n\\n\\n#### - **Waku peer exchange**\\n We have designed and then created a discovery mechanism suitable for resource-restricted nodes called [Waku peer exchange](https://rfc.vac.dev/spec/34/). Work on all these protocols empowers nodes, including resource-restricted devices, to participate seamlessly, ensuring that the network remains accessible to all.\\n\\n\\n\\n### Connectivity: discovering and managing peers\\n\\nA Waku network can only function well if we make it efficient for nodes to connect and interact.\\n\\nDuring the first half of 2023, we spent significant effort improving how a node discovers peers and manages its connectivity to those peers. We have boosted a node\'s ability to differentiate between \\"good\\" and \\"bad\\" connections, including integrating [gossipsub peer scoring](https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md#peer-scoring).\\n\\n\\nThanks to the introduction of [libp2p rendezvous discovery](https://rfc.vac.dev/spec/57/#libp2p-rendezvous-and-circuit-relay), nodes behind restrictive NATs can now make themselves discoverable and connect to other nodes by coordinating a NAT hole punch via a [circuit-relay connection](https://rfc.vac.dev/spec/57/#libp2p-rendezvous-and-circuit-relay).\\n\\nWe have also modified [discovery](https://rfc.vac.dev/spec/51/#discovery) methods such as [discv5](https://github.com/ethereum/devp2p/blob/master/discv5/discv5.md), to consider static sharding when filtering discovered nodes.\\n\\n### DoS protection\\n\\nOne of the most important considerations of any Waku network deployment is protecting the network against spam and DOS attacks. While we are still working on productising a [privacy-preserving spam protection mechanism based on rate-limiting nullifiers](https://rfc.vac.dev/spec/17/), we focused in H1 on developing a simple DoS mitigation mechanism for Status Communities.\\n\\nThis requires all messages belonging to a community to be signed with a key distributed to all community members. Since static sharding ensures messages are only routed within a community, each relayer in the Waku network can validate that each routed message truly originated from within the community and discard those that did not.\\n\\n\\n\\n\\n\\n### Building for builders\\n\\n#### - Docs\\nWe are continuing to make building on Waku more accessible than ever. We have redesigned and improved our [docs website](https://docs.waku.org/), making it easier for you to get acquainted with our work.\\n\\n#### - C API\\nThe nwaku client has recently seen the introduction of [a C API](https://github.com/waku-org/nwaku/tree/b9d5d28af5afcc2589357a132c9b5beb57202828/examples/cbindings) that can be seamlessly wrapped in multiple programming languages (see the [Python wrapper](https://github.com/waku-org/nwaku/tree/b9d5d28af5afcc2589357a132c9b5beb57202828/examples/python) as an example), an efficient [addition](https://docs.waku.org/guides/nodes-and-sdks/) to our existing languages and frameworks support. By simplifying the process of integrating nwaku as a service node into other applications, we are fostering an environment where more projects can actively build on Waku and contribute to the Waku network.\\n\\n## Setting the stage for growth\\n\\nThis post provides a glimpse into the Waku Team\'s progress in the first half of 2023.\\n\\n\\nOur sights are currently set on taking what we have learned and building a [viable public Waku Network](https://github.com/waku-org/research/issues/1) that can scale to even larger numbers while maintaining our core [principles](https://status.im/about/#our-principles) of open-access, privacy-preservation, decentralisation, and transparency about trade-offs.\\n\\n\\nConquering those research & development challenges will not only scale Waku, but will play a significant role in growing and scaling Status Communities. Where we now have made certain trade-offs, our end-goal and principles are aligned in our end-goals, you\'ll soon read more about our goals and milestones in our upcoming Roadmap.\\n\\n\\n\\nAs a team, we remain dedicated to this mandate while acknowledging the vast involvement of community members and collaborators who contribute to our journey.\\n\\n\\n\\n## **Contribute to the decentralisation of communication.**\\n\\nHelp us ensure that we are staying decentralised by [running your own Waku Node!](https://docs.waku.org/guides/run-nwaku-node)\\n\\n|  | Integrate Waku in your application |\\n| --- | --- |\\n| nwaku | https://github.com/waku-org/nwaku |\\n| Browser (JS/TS) | https://github.com/waku-org/js-waku |\\n| Go | https://github.com/waku-org/go-waku |\\n| Rust | https://github.com/waku-org/waku-rust-bindings |\\n| More\u2026 | https://docs.waku.org/guides/nodes-and-sdks |\\n\\n\\nSoon we will also release our upcoming roadmap.\\n\\nStay tuned, and follow our [Twitter](https://twitter.com/Waku_org) to keep yourself updated on new launches. Say hello to us on [Discord](https://discord.gg/GdJJh38sZR), [join our team](https://jobs.status.im/), or crack some of our [bounties](https://github.org/waku-org/bounties)  --- No need to remain shy!\\n\\n\\n\\n\\n\\n------------\\n*`Written by Mf & Hanno 09/2023`*"},{"id":"device-pairing-in-js-waku-and-go-waku","metadata":{"permalink":"/device-pairing-in-js-waku-and-go-waku","source":"@site/posts/2023-04-24-device-pairing-in-js-waku-and-go-waku.mdx","title":"Device Pairing in Js-waku and Go-waku","description":"Device pairing and secure message exchange using Waku and noise protocol.","date":"2023-04-24T12:00:00.000Z","formattedDate":"April 24, 2023","tags":[],"readingTime":4.09,"hasTruncateMarker":true,"authors":[{"name":"Richard","twitter":"richardramos_me","github":"richard-ramos","website":"https://richard-ramos.github.io/","key":"rramos"}],"frontMatter":{"layout":"post","name":"Device Pairing in Js-waku and Go-waku","title":"Device Pairing in Js-waku and Go-waku","date":"2023-04-24T12:00:00.000Z","authors":"rramos","published":true,"slug":"device-pairing-in-js-waku-and-go-waku","categories":"platform"},"prevItem":{"title":"Scaling Waku: A Progress Update","permalink":"/scaling-waku-progress-update"},"nextItem":{"title":"The Future of Waku Network: Scaling, Incentivization, and Heterogeneity","permalink":"/future-of-waku-network"}},"content":"Device pairing and secure message exchange using Waku and noise protocol.\\n\\n\x3c!--truncate--\x3e\\n\\nAs the world becomes increasingly connected through the internet, the need for secure and reliable communication becomes paramount. In [this article](https://vac.dev/wakuv2-noise) it is described how the Noise protocol can be used as a key-exchange mechanism for Waku.\\n\\nRecently, this feature was introduced in [js-waku](https://github.com/waku-org/js-noise) and [go-waku](https://github.com/waku-org/go-waku), providing a simple API for developers to implement secure communication protocols using the Noise Protocol framework. These open-source libraries provide a solid foundation for building secure and decentralized applications that prioritize data privacy and security.\\n\\nThis functionality is designed to be simple and easy to use, even for developers who are not experts in cryptography. The library offers a clear and concise API that abstracts away the complexity of the Noise Protocol framework and provides an straightforward interface for developers to use. Using this, developers can effortlessly implement secure communication protocols on top of their JavaScript and Go applications, without having to worry about the low-level details of cryptography.\\n\\nOne of the key benefits of using Noise is that it provides end-to-end encryption, which means that the communication between two parties is encrypted from start to finish. This is essential for ensuring the security and privacy of sensitive information\\n\\n### Device Pairing\\n\\nIn today\'s digital world, device pairing has become an integral part of our lives. Whether it\'s connecting our smartphones with other computers or web applications, the need for secure device pairing has become more crucial than ever. With the increasing threat of cyber-attacks and data breaches, it\'s essential to implement secure protocols for device pairing to ensure data privacy and prevent unauthorized access.\\n\\nTo demonstrate how device pairing can be achieved using Waku and Noise, we have examples available at https://examples.waku.org/noise-js/. You can try pairing different devices, such as mobile and desktop, via a web application. This can be done by scanning a QR code or opening a URL that contains the necessary data for a secure handshake.\\n\\nThe process works as follows:\\n\\nActors:\\n\\n- Alice the initiator\\n- Bob the responder\\n\\n1. The first step in achieving secure device pairing using Noise and Waku is for Bob generate the pairing information which could be transmitted out-of-band. For this, Bob opens https://examples.waku.org/noise-js/ and a QR code is generated, containing the data required to do the handshake. This pairing QR code is timeboxed, meaning that after 2 minutes, it will become invalid and a new QR code must be generated\\n2. Alice scans the QR code using a mobile phone. This will open the app with the QR code parameters initiating the handshake process which is described in [43/WAKU2-DEVICE-PAIRING](https://rfc.vac.dev/spec/43/#protocol-flow). These messages are exchanged between two devices over Waku to establish a secure connection. The handshake messages consist of three main parts: the initiator\'s message, the responder\'s message, and the final message, which are exchanged to establish a secure connection. While using js-noise, the developer is abstracted of this process, since the messaging happens automatically depending on the actions performed by the actors in the pairing process.\\n3. Both Alice and Bob will be asked to verify each other\'s identity. This is done by confirming if an 8-digits authorization code match in both devices. If both actors confirm that the authorization code is valid, the handshake concludes succesfully\\n4. Alice and Bob receive a set of shared keys that can be used to start exchanging encrypted messages. The shared secret keys generated during the handshake process are used to encrypt and decrypt messages sent between the devices. This ensures that the messages exchanged between the devices are secure and cannot be intercepted or modified by an attacker.\\n\\nThe above example demonstrates device pairing using js-waku. Additionally, You can also try building and experimenting with other noise implementations like nwaku, or go-waku, with an example available at https://github.com/waku-org/go-waku/tree/master/examples/noise in which the same flow described before is done with Bob (the receiver) using go-waku instead of js-waku.\\n\\n### Conclusion\\n\\nWith its easy to use API built on top of the Noise Protocol framework and the LibP2P networking stack, if you are a developer looking to implement secure messaging in their applications that are both decentralized and censorship resistant, Waku is definitely an excellent choice worth checking out!\\n\\nWaku is also Open source with a MIT and APACHEv2 licenses, which means that developers are encouraged to contribute code, report bugs, and suggest improvements to make it even better.\\n\\nDon\'t hesitate to try the live example at https://examples.waku.org/noise-js and build your own webapp using https://github.com/waku-org/js-noise, https://github.com/waku-org/js-waku and https://github.com/waku-org/go-waku. This will give you a hands-on experience of implementing secure communication protocols using the Noise Protocol framework in a practical setting. Happy coding!\\n\\n### References\\n\\n- [Noise handshakes as key-exchange mechanism for Waku](https://vac.dev/wakuv2-noise)\\n- [Noise Protocols for Waku Payload Encryption](https://rfc.vac.dev/spec/35/)\\n- [Session Management for Waku Noise](https://rfc.vac.dev/spec/37/)\\n- [Device pairing and secure transfers with Noise](https://rfc.vac.dev/spec/43/)\\n- [go-waku Noise\'s example](https://github.com/waku-org/go-waku/tree/master/examples/noise)\\n- [js-waku Noise\'s example](https://github.com/waku-org/js-waku-examples/tree/master/examples/noise-js)\\n- [js-noise](https://github.com/waku-org/js-noise/)\\n- [go-noise](https://github.com/waku-org/js-noise/)"},{"id":"future-of-waku-network","metadata":{"permalink":"/future-of-waku-network","source":"@site/posts/2023-04-03-waku-as-a-network.mdx","title":"The Future of Waku Network: Scaling, Incentivization, and Heterogeneity","description":"Learn how the Waku Network is evolving through scaling, incentivization, and diverse ecosystem development and what the future might look like.","date":"2023-04-03T00:00:00.000Z","formattedDate":"April 3, 2023","tags":[],"readingTime":5.745,"hasTruncateMarker":true,"authors":[{"name":"Franck","twitter":"fryorcraken","github":"fryorcraken","key":"franck"}],"frontMatter":{"layout":"post","name":"The Future of Waku Network: Scaling, Incentivization, and Heterogeneity","title":"The Future of Waku Network: Scaling, Incentivization, and Heterogeneity","date":"2023-04-03T00:00:00.000Z","authors":"franck","published":true,"slug":"future-of-waku-network","categories":"platform, operator, network","image":"/img/black-waku-logo-with-name.png","discuss":"https://forum.vac.dev/t/discussion-the-future-of-waku-network-scaling-incentivization-and-heterogeneity/173","hide_table_of_contents":false},"prevItem":{"title":"Device Pairing in Js-waku and Go-waku","permalink":"/device-pairing-in-js-waku-and-go-waku"}},"content":"Learn how the Waku Network is evolving through scaling, incentivization, and diverse ecosystem development and what the future might look like.\\n\\n\x3c!--truncate--\x3e\\n\\nWaku is preparing for production with a focus on the Status Communities use case. In this blog post, we will provide an\\noverview of recent discussions and research outputs, aiming to give you a better understanding of how the Waku network\\nmay look like in terms of scaling and incentivization.\\n\\n## DOS Mitigation for Status Communities\\n\\nWaku is actively exploring DOS mitigation mechanisms suitable for Status Communities. While RLN\\n(Rate Limiting Nullifiers) remains the go-to DOS protection solution due to its privacy-preserving and\\ncensorship-resistant properties, there is still more work to be done. We are excited to collaborate with PSE\\n(Privacy & Scaling Explorations) in this endeavor. Learn more about their latest progress in this [tweet](https://twitter.com/CPerezz19/status/1640373940634939394?s=20).\\n\\n## A Heterogeneous Waku Network\\n\\nAs we noted in a previous [forum post](https://forum.vac.dev/t/waku-payment-models/166/3), Waku\'s protocol\\nincentivization model needs to be flexible to accommodate various business models. Flexibility ensures that projects\\ncan choose how they want to use Waku based on their specific needs.\\n\\n### Reversing the Incentivization Question\\n\\nTraditionally, the question of incentivization revolves around how to incentivize operators to run nodes. We\'d like to\\nreframe the question and instead ask, \\"How do we pay for the infrastructure?\\"\\n\\nWaku does not intend to offer a free lunch.\\nEthereum\'s infrastructure is supported by transaction fees and inflation, with validators receiving rewards from both sources.\\nHowever, this model does not suit a communication network like Waku.\\nUsers and platforms would not want to pay for every single message they send. Additionally, Waku aims to support instant\\nephemeral messages that do not require consensus or long-term storage.\\n\\nProjects that use Waku to enable user interactions, whether for chat messages, gaming, private DeFi, notifications, or\\ninter-wallet communication, may have different value extraction models. Some users might provide services for the\\nproject and expect to receive value by running nodes, while others may pay for the product or run infrastructure to\\ncontribute back. Waku aims to support each of these use cases, which means there will be various ways to \\"pay for the\\ninfrastructure.\\"\\n\\nIn [his talk](https://vac.dev/building-privacy-protecting-infrastructure), Oskar addressed two strategies: RLN and service credentials.\\n\\n### RLN and Service Credentials\\n\\nRLN enables DOS protection across the network in a privacy-preserving and permission-less manner: stake in a contract,\\nand you can send messages.\\n\\nService credentials establish a customer-provider relationship. Users might pay to have messages they are interested in\\nstored and served by a provider. Alternatively, a community owner could pay a service provider to host their community.\\n\\nProviders could offer trial or limited free services to Waku users, similar to Slack or Discord. Once a trial is expired or outgrown,\\na community owner could pay for more storage or bandwidth, similar to Slack\'s model.\\nAlternatively, individual users could contribute financially, akin to Discord\'s Server Boost, or by sharing their own\\nresources with their community.\\n\\nWe anticipate witnessing various scenarios across the spectrum: from users sharing resources to users paying for access to the network and everything in between.\\n\\n## Waku Network: Ethereum or Cosmos?\\n\\nAnother perspective is to consider whether the Waku network will resemble Ethereum or Cosmos.\\n\\nFor those not familiar with the difference between both, in a very concise manner:\\n\\n- Ethereum is a set of protocols and software that are designed to operate on one common network and infrastructure\\n- Cosmos is a set of protocols and software (SDKs) designed to be deployed in separate yet interoperable networks and infrastructures by third parties\\n\\nWe want Waku to be decentralized to provide censorship resistance and privacy-preserving communication.\\nIf each application has to deploy its own network, we will not achieve this goal.\\nTherefore, we aim Waku to be not only an open source set of protocols, but also a shared infrastructure that anyone can leverage to build applications on top, with some guarantees in terms of decentralization and anonymity.\\nThis approach is closer in spirit to Ethereum than Cosmos.\\nDo note that, similarly to Ethereum, anyone is free to take Waku software and protocols and deploy their own network.\\n\\nYet, because of the difference in the fee model, the Waku Network is unlikely to be as unified as Ethereum\'s.\\nWe currently assume that there will be separate gossipsub networks with different funding models.\\nSince there is no consensus on Waku, each individual operator can decide which network to support, enabling Waku to maintain its permission-less property.\\n\\nMost likely, the Waku network will be heterogeneous, and node operators will choose the incentivization model they prefer.\\n\\n## Scalability and Discovery Protocols\\n\\nTo enable scalability, the flow of messages in the Waku network will be divided in shards,\\nso that not every node has to forward every message of the whole network.\\nDiscovery protocols will facilitate users connecting to the right nodes to receive the messages they are interested in.\\n\\nDifferent shards could be subject to a variety of rate limiting techniques (globally, targeted to that shard or something in-between).\\n\\nMarketplace protocols may also be developed to help operators understand how they can best support the network and where\\ntheir resources are most needed. However, we are still far from establishing or even assert that such a marketplace will be needed.\\n\\n## Open Problems\\n\\nSplitting traffic between shards reduces bandwidth consumption for every Waku Relay node.\\nThis improvement increases the likelihood that users with home connections can participate and contribute to the gossipsub network without encountering issues.\\n\\nHowever, it does not cap traffic.\\nThere are still open problems regarding how to guarantee that someone can use Waku with lower Internet bandwidth or run critical services, such as a validation node, on the same connection.\\n\\nWe have several ongoing initiatives:\\n\\n- Analyzing the Status Community protocol to confirm efficient usage of Waku [[4]](https://github.com/vacp2p/research/issues/177)\\n- Simulating the Waku Network to measure actual bandwidth usage [[5]](https://github.com/waku-org/pm/issues/2)\\n- Segregating chat messages from control and media messages [[6]](https://rfc.vac.dev/spec/57/#control-message-shards)\\n\\nThe final solution will likely be a combination of protocols that reduce bandwidth usage or mitigate the risk of DOS attacks, providing flexibility for users and platforms to enable the best experience.\\n\\n## The Evolving Waku Network\\n\\nThe definition of the \\"Waku Network\\" will likely change over time. In the near future, it will transition from a single\\ngossipsub network to a sharded set of networks unified by a common discovery layer. This change will promote scalability\\nand allow various payment models to coexist within the Waku ecosystem.\\n\\nIn conclusion, the future of Waku Network entails growth, incentivization, and heterogeneity while steadfastly\\nmaintaining its core principles. As Waku continues to evolve, we expect it to accommodate a diverse range of use cases\\nand business models, all while preserving privacy, resisting censorship, avoiding surveillance, and remaining accessible\\nto devices with limited resources.\\n\\n## References\\n\\n1. [51/WAKU2-RELAY-SHARDING](https://rfc.vac.dev/spec/51/)\\n2. [57/STATUS-Simple-Scaling](https://rfc.vac.dev/spec/57/)\\n3. [58/RLN-V2](https://rfc.vac.dev/spec/58/)\\n4. [Scaling Status Communities: Potential Problems](https://github.com/vacp2p/research/issues/177)\\n5. [Waku Network Testing](https://github.com/waku-org/pm/issues/2)\\n6. [51/WAKU2-RELAY-SHARDING: Control Message Shards](https://rfc.vac.dev/spec/57/#control-message-shards)"}]}')}}]);